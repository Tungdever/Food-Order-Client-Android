Index: app/src/main/java/com/uteating/foodapp/adapter/Cart/CartProductAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uteating.foodapp.adapter.Cart;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.CompoundButton;\r\nimport android.widget.ImageButton;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.chauthai.swipereveallayout.ViewBinderHelper;\r\n\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.uteating.foodapp.Interface.IAdapterItemListener;\r\nimport com.uteating.foodapp.R;\r\nimport com.uteating.foodapp.activity.ProductInformation.ProductInfoActivity;\r\nimport com.uteating.foodapp.custom.CustomMessageBox.CustomAlertDialog;\r\nimport com.uteating.foodapp.custom.CustomMessageBox.FailToast;\r\nimport com.uteating.foodapp.custom.CustomMessageBox.SuccessfulToast;\r\nimport com.uteating.foodapp.databinding.ItemCartProductBinding;\r\nimport com.uteating.foodapp.helper.FirebaseNotificationHelper;\r\nimport com.uteating.foodapp.helper.FirebaseProductInfoHelper;\r\nimport com.uteating.foodapp.helper.FirebaseUserInfoHelper;\r\nimport com.uteating.foodapp.model.Cart;\r\nimport com.uteating.foodapp.model.CartInfo;\r\nimport com.uteating.foodapp.model.Notification;\r\nimport com.uteating.foodapp.model.Product;\r\nimport com.uteating.foodapp.model.User;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\npublic class CartProductAdapter extends RecyclerView.Adapter<CartProductAdapter.ViewHolder> {\r\n    private Context mContext;\r\n    private List<CartInfo> mCartInfos;\r\n    private String cartId;\r\n    private final ViewBinderHelper viewBinderHelper = new ViewBinderHelper();\r\n    private int checkedItemCount = 0;\r\n    private long checkedItemPrice = 0;\r\n    private IAdapterItemListener adapterItemListener;\r\n    private boolean isCheckAll;\r\n    private String userId;\r\n    private String userName;\r\n    private ArrayList<CartInfo> selectedItems = new ArrayList<>();\r\n\r\n    public CartProductAdapter(Context mContext, List<CartInfo> mCartInfos, String cartId, boolean isCheckAll, String id) {\r\n        this.mContext = mContext;\r\n        this.mCartInfos = mCartInfos;\r\n        this.cartId = cartId;\r\n        this.isCheckAll = isCheckAll;\r\n        this.userId = id;\r\n        viewBinderHelper.setOpenOnlyOne(true);\r\n\r\n        new FirebaseUserInfoHelper(mContext).readUserInfo(userId, new FirebaseUserInfoHelper.DataStatus() {\r\n            @Override\r\n            public void DataIsLoaded(User user) {\r\n                userName = user.getUserName();\r\n            }\r\n\r\n            @Override\r\n            public void DataIsInserted() {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void DataIsUpdated() {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void DataIsDeleted() {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        return new ViewHolder(ItemCartProductBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false));\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        CartInfo cartInfo = mCartInfos.get(position);\r\n\r\n        viewBinderHelper.bind(holder.binding.swipeRevealLayout, cartInfo.getCartInfoId());\r\n\r\n        holder.binding.checkBox.setChecked(isCheckAll);\r\n\r\n        FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                Product product = snapshot.getValue(Product.class);\r\n                holder.binding.productName.setText(product.getProductName());\r\n                holder.binding.productPrice.setText(convertToMoney(product.getProductPrice())+\"đ\");\r\n                Glide.with(mContext).load(product.getProductImage1()).placeholder(R.mipmap.ic_launcher).into(holder.binding.productImage);\r\n                holder.binding.productAmount.setText(String.valueOf(cartInfo.getAmount()));\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n        isLiked(holder.binding.like, cartInfo.getProductId());\r\n\r\n        holder.binding.add.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).child(\"remainAmount\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        int amount = Integer.parseInt(holder.binding.productAmount.getText().toString());\r\n                        int remainAmount = snapshot.getValue(int.class);\r\n                        if (amount >= remainAmount) {\r\n                            new FailToast(mContext, \"Can't add anymore!\").showToast();\r\n                        }\r\n                        else {\r\n                            // Change display value\r\n                            amount++;\r\n                            holder.binding.productAmount.setText(String.valueOf(amount));\r\n                            holder.binding.checkBox.setChecked(false);\r\n                            isCheckAll = false;\r\n\r\n                            if (adapterItemListener != null) {\r\n                                adapterItemListener.onCheckedItemCountChanged(0, 0, new ArrayList<>());\r\n                                adapterItemListener.onAddClicked();\r\n                            }\r\n\r\n                            // Save to firebase\r\n                            FirebaseDatabase.getInstance().getReference().child(\"CartInfos\").child(cartId).child(cartInfo.getCartInfoId()).child(\"amount\").setValue(amount);\r\n\r\n                            FirebaseDatabase.getInstance().getReference().child(\"Carts\").child(cartId).addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                    Cart cart = snapshot.getValue(Cart.class);\r\n                                    FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                        @Override\r\n                                        public void onDataChange(@NonNull DataSnapshot snapshot1) {\r\n                                            Product product = snapshot1.getValue(Product.class);\r\n                                            int totalAmount = cart.getTotalAmount() + 1;\r\n                                            long totalPrice = cart.getTotalPrice() + product.getProductPrice();\r\n\r\n                                            HashMap<String, Object> map = new HashMap<>();\r\n                                            map.put(\"totalAmount\", totalAmount);\r\n                                            map.put(\"totalPrice\", totalPrice);\r\n                                            FirebaseDatabase.getInstance().getReference().child(\"Carts\").child(cartId).updateChildren(map);\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                }\r\n                            });\r\n\r\n                            FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).child(\"remainAmount\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                    int remainAmount = snapshot.getValue(int.class) - 1;\r\n                                    FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).child(\"remainAmount\").setValue(remainAmount);\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        holder.binding.subtract.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (!holder.binding.productAmount.getText().toString().equals(\"1\")) {\r\n                    // Change display value\r\n                    int amount = Integer.parseInt(holder.binding.productAmount.getText().toString());\r\n                    amount--;\r\n                    holder.binding.productAmount.setText(String.valueOf(amount));\r\n                    isCheckAll = false;\r\n\r\n                    if (adapterItemListener != null) {\r\n                        adapterItemListener.onCheckedItemCountChanged(0, 0, new ArrayList<>());\r\n                        adapterItemListener.onSubtractClicked();\r\n                    }\r\n\r\n                    // Save to firebase\r\n                    FirebaseDatabase.getInstance().getReference().child(\"CartInfos\").child(cartId).child(cartInfo.getCartInfoId()).child(\"amount\").setValue(amount);\r\n\r\n                    FirebaseDatabase.getInstance().getReference().child(\"Carts\").child(cartId).addListenerForSingleValueEvent(new ValueEventListener() {\r\n                        @Override\r\n                        public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                            Cart cart = snapshot.getValue(Cart.class);\r\n                            FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                @Override\r\n                                public void onDataChange(@NonNull DataSnapshot snapshot1) {\r\n                                    Product product = snapshot1.getValue(Product.class);\r\n                                    int totalAmount = cart.getTotalAmount() - 1;\r\n                                    long totalPrice = cart.getTotalPrice() - product.getProductPrice();\r\n\r\n                                    HashMap<String, Object> map = new HashMap<>();\r\n                                    map.put(\"totalAmount\", totalAmount);\r\n                                    map.put(\"totalPrice\", totalPrice);\r\n                                    FirebaseDatabase.getInstance().getReference().child(\"Carts\").child(cartId).updateChildren(map);\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        @Override\r\n                        public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                        }\r\n                    });\r\n\r\n                    FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).child(\"remainAmount\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n                        @Override\r\n                        public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                            int remainAmount = snapshot.getValue(int.class) + 1;\r\n                            FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).child(\"remainAmount\").setValue(remainAmount);\r\n                        }\r\n\r\n                        @Override\r\n                        public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    new FailToast(mContext, \"Can't reduce anymore!\").showToast();\r\n                }\r\n            }\r\n        });\r\n\r\n        holder.binding.like.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (holder.binding.like.getTag().equals(\"like\")) {\r\n                    FirebaseDatabase.getInstance().getReference().child(\"Favorites\").child(userId).child(cartInfo.getProductId()).setValue(true);\r\n                    pushNotificationFavourite(cartInfo);\r\n                    new SuccessfulToast(mContext,\"Added to your favourite list\").showToast();\r\n                }\r\n                else if (holder.binding.like.getTag().equals(\"liked\")) {\r\n                    FirebaseDatabase.getInstance().getReference().child(\"Favorites\").child(userId).child(cartInfo.getProductId()).removeValue();\r\n                    new SuccessfulToast(mContext, \"Removed from your favourite list\").showToast();\r\n                }\r\n            }\r\n        });\r\n\r\n        holder.binding.delete.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                new CustomAlertDialog(mContext,\"Delete this product?\");\r\n                CustomAlertDialog.binding.btnYes.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View view) {\r\n                        CustomAlertDialog.alertDialog.dismiss();\r\n\r\n                        FirebaseDatabase.getInstance().getReference().child(\"CartInfos\").child(cartId).child(cartInfo.getCartInfoId()).removeValue().addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                            @Override\r\n                            public void onComplete(@NonNull Task<Void> task) {\r\n                                if (task.isSuccessful()) {\r\n                                    new SuccessfulToast(mContext, \"Delete product successfully!\").showToast();\r\n                                    if (adapterItemListener != null) {\r\n                                        adapterItemListener.onDeleteProduct();\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        FirebaseDatabase.getInstance().getReference().child(\"Carts\").child(cartId).addListenerForSingleValueEvent(new ValueEventListener() {\r\n                            @Override\r\n                            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                Cart cart = snapshot.getValue(Cart.class);\r\n                                FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).addListenerForSingleValueEvent(new ValueEventListener() {\r\n                                    @Override\r\n                                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                        Product product = snapshot.getValue(Product.class);\r\n                                        int totalAmount = cart.getTotalAmount() - cartInfo.getAmount();\r\n                                        long totalPrice = cart.getTotalPrice() - (long)(product.getProductPrice() * cartInfo.getAmount());\r\n\r\n                                        HashMap<String, Object> map = new HashMap<>();\r\n                                        map.put(\"totalAmount\", totalAmount);\r\n                                        map.put(\"totalPrice\", totalPrice);\r\n                                        FirebaseDatabase.getInstance().getReference().child(\"Carts\").child(cartId).updateChildren(map);\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n                            @Override\r\n                            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                            }\r\n                        });\r\n\r\n                        FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).child(\"remainAmount\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n                            @Override\r\n                            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                int remainAmount = snapshot.getValue(int.class) + cartInfo.getAmount();\r\n                                FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).child(\"remainAmount\").setValue(remainAmount);\r\n                            }\r\n\r\n                            @Override\r\n                            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                CustomAlertDialog.binding.btnNo.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View view) {\r\n                        CustomAlertDialog.alertDialog.dismiss();\r\n                    }\r\n                });\r\n                CustomAlertDialog.showAlertDialog();\r\n            }\r\n        });\r\n\r\n        holder.binding.checkBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {\r\n                FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        Product product = snapshot.getValue(Product.class);\r\n                        if (isChecked) {\r\n                            checkedItemCount += cartInfo.getAmount();\r\n                            checkedItemPrice += cartInfo.getAmount() * product.getProductPrice();\r\n                            selectedItems.add(cartInfo);\r\n                        }\r\n                        else {\r\n                            checkedItemCount -= cartInfo.getAmount();\r\n                            checkedItemPrice -= cartInfo.getAmount() * product.getProductPrice();\r\n                            selectedItems.removeIf(c -> (c.getCartInfoId().equals(cartInfo.getCartInfoId())));\r\n                        }\r\n\r\n                        if (adapterItemListener != null) {\r\n                            adapterItemListener.onCheckedItemCountChanged(checkedItemCount, checkedItemPrice, selectedItems);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        holder.binding.itemContainer.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        Product product = snapshot.getValue(Product.class);\r\n                        if (product != null) {\r\n                            Intent intent = new Intent(mContext, ProductInfoActivity.class);\r\n                            intent.putExtra(\"productId\", product.getProductId());\r\n                            intent.putExtra(\"productName\", product.getProductName());\r\n                            intent.putExtra(\"productPrice\", product.getProductPrice());\r\n                            intent.putExtra(\"productImage1\", product.getProductImage1());\r\n                            intent.putExtra(\"productImage2\", product.getProductImage2());\r\n                            intent.putExtra(\"productImage3\", product.getProductImage3());\r\n                            intent.putExtra(\"productImage4\", product.getProductImage4());\r\n                            intent.putExtra(\"ratingStar\", product.getRatingStar());\r\n                            intent.putExtra(\"productDescription\", product.getDescription());\r\n                            intent.putExtra(\"publisherId\", product.getPublisherId());\r\n                            intent.putExtra(\"sold\", product.getSold());\r\n                            intent.putExtra(\"productType\", product.getProductType());\r\n                            intent.putExtra(\"remainAmount\", product.getRemainAmount());\r\n                            intent.putExtra(\"ratingAmount\", product.getRatingAmount());\r\n                            intent.putExtra(\"state\", product.getState());\r\n                            intent.putExtra(\"userId\", userId);\r\n                            intent.putExtra(\"userName\", userName);\r\n                            mContext.startActivity(intent);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private void isLiked(ImageButton imageButton, String productId) {\r\n        FirebaseDatabase.getInstance().getReference().child(\"Favorites\").child(userId).addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (snapshot.child(productId).exists()) {\r\n                    imageButton.setImageResource(R.drawable.ic_liked);\r\n                    imageButton.setTag(\"liked\");\r\n                }\r\n                else {\r\n                    imageButton.setImageResource(R.drawable.ic_like);\r\n                    imageButton.setTag(\"like\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private String convertToMoney(long price) {\r\n        String temp = String.valueOf(price);\r\n        String output = \"\";\r\n        int count = 3;\r\n        for (int i = temp.length() - 1; i >= 0; i--) {\r\n            count--;\r\n            if (count == 0) {\r\n                count = 3;\r\n                output = \",\" + temp.charAt(i) + output;\r\n            }\r\n            else {\r\n                output = temp.charAt(i) + output;\r\n            }\r\n        }\r\n\r\n        if (output.charAt(0) == ',')\r\n            return output.substring(1);\r\n\r\n        return output;\r\n\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return mCartInfos == null ? 0 : mCartInfos.size();\r\n    }\r\n\r\n    public void saveStates(Bundle outState) {\r\n        viewBinderHelper.saveStates(outState);\r\n    }\r\n\r\n    public void setAdapterItemListener(IAdapterItemListener adapterItemListener) {\r\n        this.adapterItemListener = adapterItemListener;\r\n    }\r\n\r\n    public void restoreStates(Bundle instate) {\r\n        viewBinderHelper.restoreStates(instate);\r\n    }\r\n\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        private final ItemCartProductBinding binding;\r\n\r\n        public ViewHolder(ItemCartProductBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n    public void pushNotificationFavourite(CartInfo cartInfo)\r\n    {\r\n        new FirebaseProductInfoHelper(cartInfo.getProductId()).readInformationById(new FirebaseProductInfoHelper.DataStatusInformationOfProduct() {\r\n            @Override\r\n            public void DataIsLoaded(Product product) {\r\n                String title = \"Favourite product\";\r\n                String content = userName + \" liked your product: \"+ product.getProductName() + \". Go to Product Information to check it.\";\r\n                Notification notification = FirebaseNotificationHelper.createNotification(title,content,product.getProductImage1(),product.getProductId(),\"None\",\"None\", null);\r\n                new FirebaseNotificationHelper(mContext).addNotification(product.getPublisherId(), notification, new FirebaseNotificationHelper.DataStatus() {\r\n                    @Override\r\n                    public void DataIsLoaded(List<Notification> notificationList, List<Notification> notificationListToNotify) {\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void DataIsInserted() {\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void DataIsUpdated() {\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void DataIsDeleted() {\r\n\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void DataIsInserted() {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void DataIsUpdated() {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void DataIsDeleted() {\r\n\r\n            }\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/uteating/foodapp/adapter/Cart/CartProductAdapter.java b/app/src/main/java/com/uteating/foodapp/adapter/Cart/CartProductAdapter.java
--- a/app/src/main/java/com/uteating/foodapp/adapter/Cart/CartProductAdapter.java	(revision 6b72b07b90ba900fe96148e07168d0653c0bf1e5)
+++ b/app/src/main/java/com/uteating/foodapp/adapter/Cart/CartProductAdapter.java	(date 1716011227771)
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -21,8 +22,10 @@
 import com.google.firebase.database.DatabaseError;
 import com.google.firebase.database.FirebaseDatabase;
 import com.google.firebase.database.ValueEventListener;
+import com.uteating.foodapp.Interface.APIService;
 import com.uteating.foodapp.Interface.IAdapterItemListener;
 import com.uteating.foodapp.R;
+import com.uteating.foodapp.RetrofitClient;
 import com.uteating.foodapp.activity.ProductInformation.ProductInfoActivity;
 import com.uteating.foodapp.custom.CustomMessageBox.CustomAlertDialog;
 import com.uteating.foodapp.custom.CustomMessageBox.FailToast;
@@ -33,6 +36,7 @@
 import com.uteating.foodapp.helper.FirebaseUserInfoHelper;
 import com.uteating.foodapp.model.Cart;
 import com.uteating.foodapp.model.CartInfo;
+import com.uteating.foodapp.model.CartProduct;
 import com.uteating.foodapp.model.Notification;
 import com.uteating.foodapp.model.Product;
 import com.uteating.foodapp.model.User;
@@ -41,6 +45,10 @@
 import java.util.HashMap;
 import java.util.List;
 
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
 public class CartProductAdapter extends RecyclerView.Adapter<CartProductAdapter.ViewHolder> {
     private Context mContext;
     private List<CartInfo> mCartInfos;
@@ -53,6 +61,7 @@
     private String userId;
     private String userName;
     private ArrayList<CartInfo> selectedItems = new ArrayList<>();
+    APIService apiService;
 
     public CartProductAdapter(Context mContext, List<CartInfo> mCartInfos, String cartId, boolean isCheckAll, String id) {
         this.mContext = mContext;
@@ -99,19 +108,40 @@
 
         holder.binding.checkBox.setChecked(isCheckAll);
 
-        FirebaseDatabase.getInstance().getReference().child("Products").child(cartInfo.getProductId()).addListenerForSingleValueEvent(new ValueEventListener() {
+//        FirebaseDatabase.getInstance().getReference().child("Products").child(cartInfo.getProductId()).addListenerForSingleValueEvent(new ValueEventListener() {
+//            @Override
+//            public void onDataChange(@NonNull DataSnapshot snapshot) {
+//                Product product = snapshot.getValue(Product.class);
+//                holder.binding.productName.setText(product.getProductName());
+//                holder.binding.productPrice.setText(convertToMoney(product.getProductPrice())+"đ");
+//                Glide.with(mContext).load(product.getProductImage1()).placeholder(R.mipmap.ic_launcher).into(holder.binding.productImage);
+//                holder.binding.productAmount.setText(String.valueOf(cartInfo.getAmount()));
+//            }
+//
+//            @Override
+//            public void onCancelled(@NonNull DatabaseError error) {
+//
+//            }
+//        });
+        apiService =  RetrofitClient.getRetrofit().create(APIService.class);
+        apiService.getProductCart(cartInfo.getProductId()).enqueue(new Callback<CartProduct>() {
             @Override
-            public void onDataChange(@NonNull DataSnapshot snapshot) {
-                Product product = snapshot.getValue(Product.class);
-                holder.binding.productName.setText(product.getProductName());
-                holder.binding.productPrice.setText(convertToMoney(product.getProductPrice())+"đ");
-                Glide.with(mContext).load(product.getProductImage1()).placeholder(R.mipmap.ic_launcher).into(holder.binding.productImage);
-                holder.binding.productAmount.setText(String.valueOf(cartInfo.getAmount()));
+            public void onResponse(Call<CartProduct> call, Response<CartProduct> response) {
+                if (response.isSuccessful() && response.body() != null) {
+                    CartProduct cartProduct = response.body();
+                    holder.binding.productName.setText(cartProduct.getProductName());
+                    holder.binding.productPrice.setText(convertToMoney(cartProduct.getProductPrice()) + "đ");
+                    Glide.with(mContext.getApplicationContext()).load(cartProduct.getProductImage1()).placeholder(R.mipmap.ic_launcher).into(holder.binding.productImage);
+                    holder.binding.productAmount.setText(String.valueOf("Count: " + cartInfo.getAmount()));
+                } else {
+
+                    Log.e("Retrofit", "Response not successful: " + response.code());
+                }
             }
-
             @Override
-            public void onCancelled(@NonNull DatabaseError error) {
+            public void onFailure(Call<CartProduct> call, Throwable t) {
 
+                Log.e("Retrofit", "API call failed: " + t.getMessage());
             }
         });
 
Index: app/src/main/java/com/uteating/foodapp/adapter/orderAdapter/OrderAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uteating.foodapp.adapter.orderAdapter;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Color;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.uteating.foodapp.R;\r\nimport com.uteating.foodapp.activity.order.OrderActivity;\r\nimport com.uteating.foodapp.activity.order.OrderDetailActivity;\r\nimport com.uteating.foodapp.custom.CustomAlertDialog;\r\nimport com.uteating.foodapp.custom.SuccessfulToast;\r\nimport com.uteating.foodapp.databinding.ItemOrderLayoutBinding;\r\n\r\nimport com.uteating.foodapp.helper.FirebaseStatusOrderHelper;\r\nimport com.uteating.foodapp.model.Bill;\r\nimport com.uteating.foodapp.model.BillInfo;\r\nimport com.uteating.foodapp.model.CurrencyFormatter;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class OrderAdapter extends RecyclerView.Adapter {\r\n    private Context context;\r\n    private ArrayList<Bill> dsOrder;\r\n    private int type;\r\n    private String userId;\r\n\r\n    public OrderAdapter(Context context, ArrayList<Bill> dsOrder, int type, String id) {\r\n        this.context = context;\r\n        this.dsOrder = dsOrder;\r\n        this.type = type;\r\n        this.userId = id;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        return new ViewHolder(ItemOrderLayoutBinding.inflate(LayoutInflater.from(context),parent,false));\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n        Bill tmp = dsOrder.get(position);\r\n        ViewHolder viewHolder = (ViewHolder) holder;\r\n        if (type == OrderActivity.CURRENT_ORDER) {\r\n            viewHolder.binding.btnSee.setText(\"Received\");\r\n            viewHolder.binding.btnSee.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    new CustomAlertDialog(context,\"Do you want to confirm this order?\");\r\n                    CustomAlertDialog.binding.btnYes.setOnClickListener(new View.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(View view) {\r\n                            new FirebaseStatusOrderHelper().setShippingToCompleted(tmp.getBillId(), new FirebaseStatusOrderHelper.DataStatus() {\r\n                                @Override\r\n                                public void DataIsLoaded(List<Bill> bills, boolean isExistingBill) {\r\n\r\n                                }\r\n\r\n                                @Override\r\n                                public void DataIsInserted() {\r\n\r\n                                }\r\n\r\n                                @Override\r\n                                public void DataIsUpdated() {\r\n                                    new SuccessfulToast(context, \"Your order has been changed to completed state!\").showToast();\r\n                                }\r\n\r\n                                @Override\r\n                                public void DataIsDeleted() {\r\n\r\n                                }\r\n                            });\r\n                            CustomAlertDialog.alertDialog.dismiss();\r\n                        }\r\n                    });\r\n                    CustomAlertDialog.binding.btnNo.setOnClickListener(new View.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(View view) {\r\n                            CustomAlertDialog.alertDialog.dismiss();\r\n                        }\r\n                    });\r\n                    CustomAlertDialog.showAlertDialog();\r\n\r\n                }\r\n            });\r\n\r\n        }\r\n        else {\r\n            viewHolder.binding.txtStatus.setTextColor(Color.parseColor(\"#48DC7D\"));\r\n            viewHolder.binding.btnSee.setText(\"Feedback & Rate\");\r\n            if (tmp.isCheckAllComment()) {\r\n                viewHolder.binding.btnSee.setEnabled(false);\r\n                viewHolder.binding.btnSee.setBackgroundResource(R.drawable.background_feedback_disnable_button);\r\n            }\r\n            else {\r\n                viewHolder.binding.btnSee.setEnabled(true);\r\n                viewHolder.binding.btnSee.setBackgroundResource(R.drawable.background_feedback_enable_button);\r\n            }\r\n            viewHolder.binding.btnSee.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    Intent intent=new Intent(context, OrderDetailActivity.class);\r\n                    intent.putExtra(\"Bill\",tmp);\r\n                    intent.putExtra(\"userId\",userId);\r\n                    context.startActivity(intent);\r\n                }\r\n            });\r\n        }\r\n\r\n        viewHolder.binding.txtId.setText(tmp.getBillId()+\"\");\r\n        viewHolder.binding.txtDate.setText(tmp.getOrderDate()+\"\");\r\n        viewHolder.binding.txtStatus.setText(tmp.getOrderStatus());\r\n        viewHolder.binding.txtTotal.setText(CurrencyFormatter.getFormatter().format(Double.valueOf(tmp.getTotalPrice()))+\"\");\r\n        viewHolder.binding.getRoot().setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent=new Intent(context, OrderDetailActivity.class);\r\n                intent.putExtra(\"Bill\",tmp);\r\n                intent.putExtra(\"userId\",userId);\r\n                context.startActivity(intent);\r\n            }\r\n        });\r\n        FirebaseDatabase.getInstance().getReference(\"BillInfos\").child(tmp.getBillId()).addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                //Tạo một BillInfos để lấy ảnh\r\n                BillInfo tmp= new BillInfo();\r\n                for (DataSnapshot item: snapshot.getChildren()) {\r\n                    tmp=item.getValue(BillInfo.class);\r\n                    break;\r\n                }\r\n                FirebaseDatabase.getInstance().getReference(\"Products\").child(tmp.getProductId()).child(\"productImage1\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        Glide.with(context)\r\n                                .load(snapshot.getValue(String.class))\r\n                                .placeholder(R.drawable.default_image)\r\n                                .into(viewHolder.binding.imgFood);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return dsOrder == null ? 0 : dsOrder.size();\r\n    }\r\n\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        private final ItemOrderLayoutBinding binding;\r\n\r\n        public ViewHolder(@NonNull ItemOrderLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/uteating/foodapp/adapter/orderAdapter/OrderAdapter.java b/app/src/main/java/com/uteating/foodapp/adapter/orderAdapter/OrderAdapter.java
--- a/app/src/main/java/com/uteating/foodapp/adapter/orderAdapter/OrderAdapter.java	(revision 6b72b07b90ba900fe96148e07168d0653c0bf1e5)
+++ b/app/src/main/java/com/uteating/foodapp/adapter/orderAdapter/OrderAdapter.java	(date 1716006189076)
@@ -62,6 +62,7 @@
                     CustomAlertDialog.binding.btnYes.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View view) {
+                            //thay đổi trạng thái của một hóa đơn từ "Shipping" sang "Completed"
                             new FirebaseStatusOrderHelper().setShippingToCompleted(tmp.getBillId(), new FirebaseStatusOrderHelper.DataStatus() {
                                 @Override
                                 public void DataIsLoaded(List<Bill> bills, boolean isExistingBill) {
@@ -133,6 +134,7 @@
                 context.startActivity(intent);
             }
         });
+        //hiển thị hình ảnh sản phẩm liên quan đến một hóa đơn
         FirebaseDatabase.getInstance().getReference("BillInfos").child(tmp.getBillId()).addListenerForSingleValueEvent(new ValueEventListener() {
             @Override
             public void onDataChange(@NonNull DataSnapshot snapshot) {
@@ -142,6 +144,7 @@
                     tmp=item.getValue(BillInfo.class);
                     break;
                 }
+                //Lấy thông tin sản phẩm và tải hình ảnh sản phẩm
                 FirebaseDatabase.getInstance().getReference("Products").child(tmp.getProductId()).child("productImage1").addListenerForSingleValueEvent(new ValueEventListener() {
                     @Override
                     public void onDataChange(@NonNull DataSnapshot snapshot) {
Index: app/src/main/java/com/uteating/foodapp/activity/order/OrderActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uteating.foodapp.activity.order;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\n\r\nimport com.google.android.material.tabs.TabLayoutMediator;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.uteating.foodapp.R;\r\nimport com.uteating.foodapp.adapter.orderAdapter.OrderViewPaperAdapter;\r\nimport com.uteating.foodapp.databinding.ActivityOrderBinding;\r\nimport com.uteating.foodapp.dialog.LoadingDialog;\r\nimport com.uteating.foodapp.model.Bill;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class OrderActivity extends AppCompatActivity {\r\n    private String userId;\r\n    private ActivityOrderBinding binding;\r\n    public static final int CURRENT_ORDER = 10001;\r\n    public static final int HISTORY_ORDER = 10002;\r\n    private ArrayList<Bill> dsCurrentOrder=new ArrayList<>();\r\n    private ArrayList<Bill> dsHistoryOrder=new ArrayList<>();\r\n    private LoadingDialog dialog;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = ActivityOrderBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n\r\n        getWindow().setStatusBarColor(Color.parseColor(\"#E8584D\"));\r\n        getWindow().setNavigationBarColor(Color.parseColor(\"#E8584D\"));\r\n\r\n        userId = getIntent().getStringExtra(\"userId\");\r\n        dialog = new LoadingDialog(this);\r\n        dialog.show();\r\n\r\n        initData();\r\n\r\n        binding.imgBack.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                finish();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void initUI() {\r\n        OrderViewPaperAdapter viewPaperAdapter = new OrderViewPaperAdapter(OrderActivity.this, dsCurrentOrder, dsHistoryOrder, userId);\r\n        binding.viewPaper2.setAdapter(viewPaperAdapter);\r\n        binding.viewPaper2.setUserInputEnabled(false);\r\n        new TabLayoutMediator(binding.tabLayout,binding.viewPaper2, ((tab, position) -> {\r\n            switch (position) {\r\n                case 0:\r\n                    tab.setText(\"Current Order\");\r\n                    break;\r\n                case 1:\r\n                    tab.setText(\"History Order\");\r\n                    break;\r\n            }\r\n        })).attach();\r\n        dialog.dismiss();\r\n    }\r\n\r\n    private void initData() {\r\n        FirebaseDatabase.getInstance().getReference(\"Bills\").addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                dsCurrentOrder.clear();\r\n                dsHistoryOrder.clear();\r\n                for (DataSnapshot item:snapshot.getChildren()) {\r\n                    Bill tmp=item.getValue(Bill.class);\r\n                    if (tmp.getRecipientId().equalsIgnoreCase(userId)) {\r\n                        //Dòng dưới là test sản phẩm\r\n                        if (!tmp.getOrderStatus().equalsIgnoreCase(\"Completed\")) {\r\n                            dsCurrentOrder.add(tmp);\r\n                        } else\r\n                            dsHistoryOrder.add(tmp);\r\n                    }\r\n                }\r\n                initUI();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/uteating/foodapp/activity/order/OrderActivity.java b/app/src/main/java/com/uteating/foodapp/activity/order/OrderActivity.java
--- a/app/src/main/java/com/uteating/foodapp/activity/order/OrderActivity.java	(revision 6b72b07b90ba900fe96148e07168d0653c0bf1e5)
+++ b/app/src/main/java/com/uteating/foodapp/activity/order/OrderActivity.java	(date 1715930925018)
@@ -41,9 +41,7 @@
         userId = getIntent().getStringExtra("userId");
         dialog = new LoadingDialog(this);
         dialog.show();
-
         initData();
-
         binding.imgBack.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -78,7 +76,7 @@
                 for (DataSnapshot item:snapshot.getChildren()) {
                     Bill tmp=item.getValue(Bill.class);
                     if (tmp.getRecipientId().equalsIgnoreCase(userId)) {
-                        //Dòng dưới là test sản phẩm
+
                         if (!tmp.getOrderStatus().equalsIgnoreCase("Completed")) {
                             dsCurrentOrder.add(tmp);
                         } else
Index: app/src/main/java/com/uteating/foodapp/Interface/APIService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uteating.foodapp.Interface;\r\n\r\n\r\n\r\nimport com.uteating.foodapp.model.Product;\r\nimport com.uteating.foodapp.model.UserDTO;\r\n\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.http.Body;\r\nimport retrofit2.http.Field;\r\nimport retrofit2.http.GET;\r\nimport retrofit2.http.POST;\r\nimport retrofit2.http.Query;\r\n\r\npublic interface APIService {\r\n    @POST(\"api/auth/signup\")\r\n    Call<String> signUp(@Body UserDTO user);\r\n    @GET(\"/api/products\")\r\n    Call<List<Product>> getAllProducts();\r\n    @GET(\"/api/products/filter\")\r\n    Call<List<Product>> getProductsByType(@Query(\"type\") String type);\r\n    @GET(\"/api/products/search\")\r\n    Call<List<Product>> searchProduct(@Query(\"keyword\") String keyword);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/uteating/foodapp/Interface/APIService.java b/app/src/main/java/com/uteating/foodapp/Interface/APIService.java
--- a/app/src/main/java/com/uteating/foodapp/Interface/APIService.java	(revision 6b72b07b90ba900fe96148e07168d0653c0bf1e5)
+++ b/app/src/main/java/com/uteating/foodapp/Interface/APIService.java	(date 1716010121293)
@@ -2,6 +2,8 @@
 
 
 
+import com.uteating.foodapp.model.Cart;
+import com.uteating.foodapp.model.CartProduct;
 import com.uteating.foodapp.model.Product;
 import com.uteating.foodapp.model.UserDTO;
 
@@ -23,4 +25,7 @@
     Call<List<Product>> getProductsByType(@Query("type") String type);
     @GET("/api/products/search")
     Call<List<Product>> searchProduct(@Query("keyword") String keyword);
+
+    @GET("/api/cart/productCart")
+    Call<CartProduct> getProductCart(@Query("idProduct") String idProduct);
 }
Index: app/src/main/java/com/uteating/foodapp/adapter/Cart/OrderProductAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uteating.foodapp.adapter.Cart;\r\n\r\nimport android.content.Context;\r\nimport android.view.LayoutInflater;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\n\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.uteating.foodapp.R;\r\nimport com.uteating.foodapp.databinding.ItemOrderProductBinding;\r\nimport com.uteating.foodapp.model.CartInfo;\r\nimport com.uteating.foodapp.model.Product;\r\n\r\nimport java.util.List;\r\n\r\npublic class OrderProductAdapter extends RecyclerView.Adapter<OrderProductAdapter.ViewHolder>{\r\n    private Context mContext;\r\n    private List<CartInfo> mCartInfos;\r\n\r\n    public OrderProductAdapter(Context mContext, List<CartInfo> mCartInfos) {\r\n        this.mContext = mContext;\r\n        this.mCartInfos = mCartInfos;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        return new ViewHolder(ItemOrderProductBinding.inflate(LayoutInflater.from(parent.getContext()), parent, false));\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        CartInfo cartInfo = mCartInfos.get(position);\r\n\r\n        FirebaseDatabase.getInstance().getReference().child(\"Products\").child(cartInfo.getProductId()).addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                Product product = snapshot.getValue(Product.class);\r\n                holder.binding.orderProductName.setText(product.getProductName());\r\n                holder.binding.orderProductPrice.setText(convertToMoney(product.getProductPrice())+\"đ\");\r\n                Glide.with(mContext.getApplicationContext()).load(product.getProductImage1()).placeholder(R.mipmap.ic_launcher).into(holder.binding.orderProductImage);\r\n                holder.binding.amount.setText(String.valueOf(\"Count: \"+ cartInfo.getAmount()));\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return mCartInfos == null ? 0 : mCartInfos.size();\r\n    }\r\n\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        private final ItemOrderProductBinding binding;\r\n\r\n        public ViewHolder(ItemOrderProductBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n\r\n    private String convertToMoney(long price) {\r\n        String temp = String.valueOf(price);\r\n        String output = \"\";\r\n        int count = 3;\r\n        for (int i = temp.length() - 1; i >= 0; i--) {\r\n            count--;\r\n            if (count == 0) {\r\n                count = 3;\r\n                output = \",\" + temp.charAt(i) + output;\r\n            }\r\n            else {\r\n                output = temp.charAt(i) + output;\r\n            }\r\n        }\r\n\r\n        if (output.charAt(0) == ',')\r\n            return output.substring(1);\r\n\r\n        return output;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/uteating/foodapp/adapter/Cart/OrderProductAdapter.java b/app/src/main/java/com/uteating/foodapp/adapter/Cart/OrderProductAdapter.java
--- a/app/src/main/java/com/uteating/foodapp/adapter/Cart/OrderProductAdapter.java	(revision 6b72b07b90ba900fe96148e07168d0653c0bf1e5)
+++ b/app/src/main/java/com/uteating/foodapp/adapter/Cart/OrderProductAdapter.java	(date 1716010459395)
@@ -1,6 +1,7 @@
 package com.uteating.foodapp.adapter.Cart;
 
 import android.content.Context;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.ViewGroup;
 
@@ -13,17 +14,24 @@
 import com.google.firebase.database.DatabaseError;
 import com.google.firebase.database.FirebaseDatabase;
 import com.google.firebase.database.ValueEventListener;
+import com.uteating.foodapp.Interface.APIService;
 import com.uteating.foodapp.R;
+import com.uteating.foodapp.RetrofitClient;
 import com.uteating.foodapp.databinding.ItemOrderProductBinding;
 import com.uteating.foodapp.model.CartInfo;
+import com.uteating.foodapp.model.CartProduct;
 import com.uteating.foodapp.model.Product;
 
 import java.util.List;
 
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
 public class OrderProductAdapter extends RecyclerView.Adapter<OrderProductAdapter.ViewHolder>{
     private Context mContext;
     private List<CartInfo> mCartInfos;
-
+    APIService apiService;
     public OrderProductAdapter(Context mContext, List<CartInfo> mCartInfos) {
         this.mContext = mContext;
         this.mCartInfos = mCartInfos;
@@ -38,22 +46,45 @@
     @Override
     public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
         CartInfo cartInfo = mCartInfos.get(position);
-
-        FirebaseDatabase.getInstance().getReference().child("Products").child(cartInfo.getProductId()).addValueEventListener(new ValueEventListener() {
+//
+//        FirebaseDatabase.getInstance().getReference().child("Products").child(cartInfo.getProductId()).addValueEventListener(new ValueEventListener() {
+//            @Override
+//            public void onDataChange(@NonNull DataSnapshot snapshot) {
+//                Product product = snapshot.getValue(Product.class);
+//                holder.binding.orderProductName.setText(product.getProductName());
+//                holder.binding.orderProductPrice.setText(convertToMoney(product.getProductPrice())+"đ");
+//                Glide.with(mContext.getApplicationContext()).load(product.getProductImage1()).placeholder(R.mipmap.ic_launcher).into(holder.binding.orderProductImage);
+//                holder.binding.amount.setText(String.valueOf("Count: "+ cartInfo.getAmount()));
+//            }
+//
+//            @Override
+//            public void onCancelled(@NonNull DatabaseError error) {
+//
+//            }
+//        });
+        apiService =  RetrofitClient.getRetrofit().create(APIService.class);
+        apiService.getProductCart(cartInfo.getProductId()).enqueue(new Callback<CartProduct>() {
             @Override
-            public void onDataChange(@NonNull DataSnapshot snapshot) {
-                Product product = snapshot.getValue(Product.class);
-                holder.binding.orderProductName.setText(product.getProductName());
-                holder.binding.orderProductPrice.setText(convertToMoney(product.getProductPrice())+"đ");
-                Glide.with(mContext.getApplicationContext()).load(product.getProductImage1()).placeholder(R.mipmap.ic_launcher).into(holder.binding.orderProductImage);
-                holder.binding.amount.setText(String.valueOf("Count: "+ cartInfo.getAmount()));
+            public void onResponse(Call<CartProduct> call, Response<CartProduct> response) {
+                if (response.isSuccessful() && response.body() != null) {
+                    CartProduct cartProduct = response.body();
+                    holder.binding.orderProductName.setText(cartProduct.getProductName());
+                    holder.binding.orderProductPrice.setText(convertToMoney(cartProduct.getProductPrice()) + "đ");
+                    Glide.with(mContext.getApplicationContext()).load(cartProduct.getProductImage1()).placeholder(R.mipmap.ic_launcher).into(holder.binding.orderProductImage);
+                    holder.binding.amount.setText(String.valueOf("Count: " + cartInfo.getAmount()));
+                } else {
+
+                    Log.e("Retrofit", "Response not successful: " + response.code());
+                }
             }
-
             @Override
-            public void onCancelled(@NonNull DatabaseError error) {
+            public void onFailure(Call<CartProduct> call, Throwable t) {
 
+                Log.e("Retrofit", "API call failed: " + t.getMessage());
             }
         });
+
+
     }
 
     @Override
Index: app/src/main/java/com/uteating/foodapp/helper/FirebaseStatusOrderHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.uteating.foodapp.helper;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\n\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.uteating.foodapp.model.Bill;\r\nimport com.uteating.foodapp.model.BillInfo;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class FirebaseStatusOrderHelper {\r\n    private FirebaseDatabase mDatabase;\r\n    private DatabaseReference mReferenceStatusOrder;\r\n    private List<Bill> bills = new ArrayList<>();\r\n    private String userId;\r\n    private List<BillInfo> billInfoList = new ArrayList<>();\r\n    private List<Integer> soldValueList = new ArrayList<>();\r\n\r\n    public interface DataStatus{\r\n        void DataIsLoaded(List<Bill> bills, boolean isExistingBill);\r\n        void DataIsInserted();\r\n        void DataIsUpdated();\r\n        void DataIsDeleted();\r\n\r\n    }\r\n\r\n    public FirebaseStatusOrderHelper(String user) {\r\n        userId = user;\r\n        mDatabase = FirebaseDatabase.getInstance();\r\n        mReferenceStatusOrder = mDatabase.getReference();\r\n    }\r\n\r\n    public FirebaseStatusOrderHelper() {\r\n        mDatabase = FirebaseDatabase.getInstance();\r\n        mReferenceStatusOrder = mDatabase.getReference();\r\n    }\r\n\r\n    public void readConfirmBills(String userId, final DataStatus dataStatus)\r\n    {\r\n        mReferenceStatusOrder.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                bills.clear();\r\n                boolean isExistingBill = false;\r\n                for (DataSnapshot keyNode : snapshot.child(\"Bills\").getChildren()) {\r\n                    if (keyNode.child(\"senderId\").getValue(String.class).equals(userId)\r\n                    &&  keyNode.child(\"orderStatus\").getValue(String.class).equals(\"Confirm\")) {\r\n                        Bill bill = keyNode.getValue(Bill.class);\r\n                        bills.add(bill);\r\n                        isExistingBill = true;\r\n                    }\r\n                }\r\n\r\n                if (dataStatus != null) {\r\n                    dataStatus.DataIsLoaded(bills, isExistingBill);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n    public void readShippingBills(String userId, final DataStatus dataStatus)\r\n    {\r\n        mReferenceStatusOrder.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                bills.clear();\r\n                boolean isExistingShippintBill = false;\r\n                for (DataSnapshot keyNode : snapshot.child(\"Bills\").getChildren())\r\n                {\r\n                    if (keyNode.child(\"senderId\").getValue(String.class).equals(userId)\r\n                            &&  keyNode.child(\"orderStatus\").getValue(String.class).equals(\"Shipping\"))\r\n                    {\r\n                        Bill bill = keyNode.getValue(Bill.class);\r\n                        bills.add(bill);\r\n                        isExistingShippintBill = true;\r\n                    }\r\n                }\r\n\r\n                if (dataStatus != null) {\r\n                    dataStatus.DataIsLoaded(bills, isExistingShippintBill);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n    public void readCompletedBills(String userId,final DataStatus dataStatus) {\r\n        mReferenceStatusOrder.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                bills.clear();\r\n                boolean isExistingBill = false;\r\n                for (DataSnapshot keyNode : snapshot.child(\"Bills\").getChildren()) {\r\n                    if (keyNode.child(\"senderId\").getValue(String.class).equals(userId)\r\n                            && keyNode.child(\"orderStatus\").getValue(String.class).equals(\"Completed\")) {\r\n                        Bill bill = keyNode.getValue(Bill.class);\r\n                        bills.add(bill);\r\n                        isExistingBill = true;\r\n                    }\r\n                }\r\n\r\n                if (dataStatus != null) {\r\n                    dataStatus.DataIsLoaded(bills, isExistingBill);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public void setConfirmToShipping(String billId,final DataStatus dataStatus) {\r\n        mReferenceStatusOrder.child(\"Bills\").child(billId).child(\"orderStatus\").setValue(\"Shipping\")\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void unused) {\r\n                        if (dataStatus != null) {\r\n                            dataStatus.DataIsUpdated();\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n    public void setShippingToCompleted(String billId,final DataStatus dataStatus) {\r\n        mReferenceStatusOrder.child(\"Bills\").child(billId).child(\"orderStatus\").setValue(\"Completed\")\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void unused) {\r\n                        if (dataStatus != null) {\r\n                            dataStatus.DataIsUpdated();\r\n                        }\r\n                    }\r\n                });\r\n\r\n        // set sold and remainAmount value of Product\r\n        billInfoList = new ArrayList<>();\r\n        soldValueList = new ArrayList<>();\r\n\r\n        mReferenceStatusOrder.child(\"BillInfos\").child(billId).addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                for (DataSnapshot keyNode: snapshot.getChildren())\r\n                {\r\n                    BillInfo billInfo = keyNode.getValue(BillInfo.class);\r\n                    billInfoList.add(billInfo);\r\n                }\r\n                readSomeInfoOfBill();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public void readSomeInfoOfBill() {\r\n        mReferenceStatusOrder.child(\"Products\").addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                for (BillInfo info : billInfoList) {\r\n                    int sold = snapshot.child(info.getProductId()).child(\"sold\").getValue(int.class) + info.getAmount();\r\n                    soldValueList.add(sold);\r\n                }\r\n                updateSoldValueOfProduct();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public void updateSoldValueOfProduct() {\r\n        for (int i = 0; i < billInfoList.size(); i++) {\r\n            mReferenceStatusOrder.child(\"Products\").child(billInfoList.get(i).getProductId()).child(\"sold\").setValue(soldValueList.get(i));\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/uteating/foodapp/helper/FirebaseStatusOrderHelper.java b/app/src/main/java/com/uteating/foodapp/helper/FirebaseStatusOrderHelper.java
--- a/app/src/main/java/com/uteating/foodapp/helper/FirebaseStatusOrderHelper.java	(revision 6b72b07b90ba900fe96148e07168d0653c0bf1e5)
+++ b/app/src/main/java/com/uteating/foodapp/helper/FirebaseStatusOrderHelper.java	(date 1716005228044)
@@ -44,6 +44,7 @@
 
     public void readConfirmBills(String userId, final DataStatus dataStatus)
     {
+        //Đọc và lấy các hoá đơn có trạng thái "Confirm" của một user
         mReferenceStatusOrder.addValueEventListener(new ValueEventListener() {
             @Override
             public void onDataChange(@NonNull DataSnapshot snapshot) {
@@ -71,6 +72,7 @@
     }
     public void readShippingBills(String userId, final DataStatus dataStatus)
     {
+        //ọc và lấy các hoá đơn có trạng thái "Shipping" của một user
         mReferenceStatusOrder.addValueEventListener(new ValueEventListener() {
             @Override
             public void onDataChange(@NonNull DataSnapshot snapshot) {
@@ -98,7 +100,9 @@
             }
         });
     }
-    public void readCompletedBills(String userId,final DataStatus dataStatus) {
+    public void readCompletedBills(String userId,final DataStatus dataStatus)
+    {
+        //Đọc và lấy các hoá đơn có trạng thái "Completed" của một user
         mReferenceStatusOrder.addValueEventListener(new ValueEventListener() {
             @Override
             public void onDataChange(@NonNull DataSnapshot snapshot) {
@@ -126,6 +130,7 @@
     }
 
     public void setConfirmToShipping(String billId,final DataStatus dataStatus) {
+        //Cập nhật trạng thái của một hoá đơn từ "Confirm" sang "Shipping".
         mReferenceStatusOrder.child("Bills").child(billId).child("orderStatus").setValue("Shipping")
                 .addOnSuccessListener(new OnSuccessListener<Void>() {
                     @Override
@@ -137,6 +142,7 @@
                 });
     }
     public void setShippingToCompleted(String billId,final DataStatus dataStatus) {
+        //Cập nhật trạng thái của một hoá đơn từ "Shipping" sang "Completed".
         mReferenceStatusOrder.child("Bills").child(billId).child("orderStatus").setValue("Completed")
                 .addOnSuccessListener(new OnSuccessListener<Void>() {
                     @Override
@@ -170,6 +176,7 @@
     }
 
     public void readSomeInfoOfBill() {
+        //Đọc thông tin về số lượng bán và cập nhật các giá trị liên quan cho các sản phẩm trong hoá đơn.
         mReferenceStatusOrder.child("Products").addListenerForSingleValueEvent(new ValueEventListener() {
             @Override
             public void onDataChange(@NonNull DataSnapshot snapshot) {
@@ -188,6 +195,7 @@
     }
 
     public void updateSoldValueOfProduct() {
+        //Cập nhật giá trị sold của các sản phẩm
         for (int i = 0; i < billInfoList.size(); i++) {
             mReferenceStatusOrder.child("Products").child(billInfoList.get(i).getProductId()).child("sold").setValue(soldValueList.get(i));
         }
Index: app/src/main/java/com/uteating/foodapp/model/CartProduct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/uteating/foodapp/model/CartProduct.java b/app/src/main/java/com/uteating/foodapp/model/CartProduct.java
new file mode 100644
--- /dev/null	(date 1716008391407)
+++ b/app/src/main/java/com/uteating/foodapp/model/CartProduct.java	(date 1716008391407)
@@ -0,0 +1,53 @@
+package com.uteating.foodapp.model;
+
+import java.io.Serializable;
+
+public class CartProduct implements Serializable {
+    private String productId;
+    private String productName;
+    private String productImage1;
+    private long productPrice;
+    private int remainAmount;
+
+    // Getters and setters
+
+    public String getProductId() {
+        return productId;
+    }
+
+    public void setProductId(String productId) {
+        this.productId = productId;
+    }
+
+    public String getProductName() {
+        return productName;
+    }
+
+    public void setProductName(String productName) {
+        this.productName = productName;
+    }
+
+    public String getProductImage1() {
+        return productImage1;
+    }
+
+    public void setProductImage1(String productImage1) {
+        this.productImage1 = productImage1;
+    }
+
+    public long getProductPrice() {
+        return productPrice;
+    }
+
+    public void setProductPrice(long productPrice) {
+        this.productPrice = productPrice;
+    }
+
+    public int getRemainAmount() {
+        return remainAmount;
+    }
+
+    public void setRemainAmount(int remainAmount) {
+        this.remainAmount = remainAmount;
+    }
+}
